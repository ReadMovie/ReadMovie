// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ReadMovie.Data;

#nullable disable

namespace ReadMovie.Migrations
{
    [DbContext(typeof(ReadMovieDb))]
    [Migration("20250918213336_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ReadMovie.Models.Categoria", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("ReadMovie.Models.Criterio", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comentario")
                        .HasColumnType("text");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("LibroId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PeliculaId")
                        .HasColumnType("bigint");

                    b.Property<short>("Puntuacion")
                        .HasColumnType("smallint");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LibroId");

                    b.HasIndex("PeliculaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Criterios");
                });

            modelBuilder.Entity("ReadMovie.Models.Genero", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Generos");
                });

            modelBuilder.Entity("ReadMovie.Models.Libro", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Autor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("CategoriaId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("FechaPublicacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("GeneroId")
                        .HasColumnType("smallint");

                    b.Property<string>("Resumen")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("GeneroId");

                    b.ToTable("Libros");
                });

            modelBuilder.Entity("ReadMovie.Models.Pelicula", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<short>("CategoriaId")
                        .HasColumnType("smallint");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaLanzamineto")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("GeneroId")
                        .HasColumnType("smallint");

                    b.Property<string>("Resumen")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("GeneroId");

                    b.ToTable("Peliculas");
                });

            modelBuilder.Entity("ReadMovie.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Rol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("ReadMovie.Models.Criterio", b =>
                {
                    b.HasOne("ReadMovie.Models.Libro", "Libro")
                        .WithMany("Criterios")
                        .HasForeignKey("LibroId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ReadMovie.Models.Pelicula", "Pelicula")
                        .WithMany("Criterios")
                        .HasForeignKey("PeliculaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ReadMovie.Models.Usuario", "Usuario")
                        .WithMany("Criterios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Libro");

                    b.Navigation("Pelicula");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ReadMovie.Models.Libro", b =>
                {
                    b.HasOne("ReadMovie.Models.Categoria", "Categoria")
                        .WithMany("Libros")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReadMovie.Models.Genero", "Genero")
                        .WithMany("Libros")
                        .HasForeignKey("GeneroId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Genero");
                });

            modelBuilder.Entity("ReadMovie.Models.Pelicula", b =>
                {
                    b.HasOne("ReadMovie.Models.Categoria", "Categoria")
                        .WithMany("Peliculas")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReadMovie.Models.Genero", "Genero")
                        .WithMany("Peliculas")
                        .HasForeignKey("GeneroId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Genero");
                });

            modelBuilder.Entity("ReadMovie.Models.Categoria", b =>
                {
                    b.Navigation("Libros");

                    b.Navigation("Peliculas");
                });

            modelBuilder.Entity("ReadMovie.Models.Genero", b =>
                {
                    b.Navigation("Libros");

                    b.Navigation("Peliculas");
                });

            modelBuilder.Entity("ReadMovie.Models.Libro", b =>
                {
                    b.Navigation("Criterios");
                });

            modelBuilder.Entity("ReadMovie.Models.Pelicula", b =>
                {
                    b.Navigation("Criterios");
                });

            modelBuilder.Entity("ReadMovie.Models.Usuario", b =>
                {
                    b.Navigation("Criterios");
                });
#pragma warning restore 612, 618
        }
    }
}
